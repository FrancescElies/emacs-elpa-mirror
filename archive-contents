(1
 (ac-ispell . [(20151031 1926) ((auto-complete (1 4)) (cl-lib (0 5))) "ispell completion source for auto-complete" single])
 (ace-jump-helm-line . [(20160918 1136) ((avy (0 4 0)) (helm (1 6 3))) "Ace-jump to a candidate in helm window" single])
 (ace-jump-mode . [(20140616 115) nil "a quick cursor location minor mode for emacs" single])
 (ace-link . [(20180101 1328) ((avy (0 4 0))) "Quickly follow links" single])
 (ace-window . [(20171228 1109) ((avy (0 2 0))) "Quickly switch windows." single])
 (adaptive-wrap . [(0 5 1) nil "Smart lineprefix" single])
 (aggressive-indent . [(20171012 1107) ((emacs (24 1)) (cl-lib (0 5))) "Minor mode to aggressively keep your code always indented" single])
 (alert . [(20180105 2127) ((gntp (0 1)) (log4e (0 3 0))) "Growl-style notification system for Emacs" single])
 (all-the-icons . [(20171011 324) ((emacs (24 3)) (memoize (1 0 1))) "A library for inserting Developer icons" tar])
 (anaconda-mode . [(20171223 1118) ((emacs (24)) (pythonic (0 1 0)) (dash (2 6 0)) (s (1 9)) (f (0 16 2))) "Code navigation, documentation lookup and completion for Python" single])
 (anything . [(20170125 1710) nil "open anything / QuickSilverselection framework" tar])
 (anzu . [(20161017 907) ((emacs (24 3))) "Show number of matches in mode-line while searching" single])
 (apiwrap . [(20171202 1653) ((emacs (25))) "api-wrapping macros" single])
 (asilea . [(20150105 725) ((emacs (24)) (cl-lib (0 5))) "Find best compiler options using simulated annealing" single])
 (async . [(20180103 2312) nil "Asynchronous processing in Emacs" tar])
 (auctex . [(12 1 0) nil "Integrated environment for *TeX*" tar])
 (auto-compile . [(20180111 436) ((emacs (24 3)) (packed (2 0 0))) "automatically compile Emacs Lisp libraries" single])
 (auto-complete . [(20170124 1845) ((popup (0 5 0)) (cl-lib (0 5))) "Auto Completion for GNU Emacs" tar])
 (auto-dictionary . [(20150410 910) nil "automatic dictionary switcher for flyspell" single])
 (auto-highlight-symbol . [(20130313 243) nil "Automatic highlighting current symbol minor mode" single])
 (auto-yasnippet . [(20160925 225) ((yasnippet (0 8 0))) "Quickly create disposable yasnippets" single])
 (avy . [(20171230 220) ((emacs (24 1)) (cl-lib (0 5))) "Jump to arbitrary positions in visible text and select text quickly." single])
 (basic-c-compile . [(20170302 312) ((cl-lib (0 5)) (f (0 19 0))) "Quickly create a Makefile, compile and run C." single])
 (bind-key . [(20171210 2125) nil "A simple way to manage personal keybindings" single])
 (bind-map . [(20161207 711) ((emacs (24 3))) "Bind personal keymaps in multiple locations" single])
 (browse-at-remote . [(20171115 210) ((f (0 17 2)) (s (1 9 0)) (cl-lib (0 5))) "Open github/gitlab/bitbucket/stash page from Emacs" single])
 (cargo . [(20171218 855) ((emacs (24 3)) (rust-mode (0 2 0))) "Emacs Minor Mode for Cargo, Rust's Package Manager." tar])
 (circe . [(20180105 1158) ((cl-lib (0 5))) "Client for IRC in Emacs" tar])
 (clang-format . [(20171202 1318) ((cl-lib (0 3))) "Format code using clang-format" single])
 (clean-aindent-mode . [(20171017 1343) nil "Simple indent and unindent, trims indent white-space" single])
 (cmake-ide . [(20180131 526) ((emacs (24 4)) (cl-lib (0 5)) (seq (1 11)) (levenshtein (0)) (s (1 11 0))) "Calls CMake to find out include paths and other compiler flags" single])
 (cmake-mode . [(20180104 1137) nil "major-mode for editing CMake sources" single])
 (coffee-mode . [(20170324 240) ((emacs (24 3))) "Major mode for CoffeeScript code" single])
 (column-enforce-mode . [(20171030 1200) nil "Highlight text that extends beyond a  column" single])
 (command-log-mode . [(20151208 852) nil "log keyboard commands to buffer" single])
 (common-lisp-snippets . [(20170918 356) ((yasnippet (0 8 0))) "Yasnippets for Common Lisp" tar])
 (company . [(20180101 1101) ((emacs (24 3))) "Modular text completion framework" tar])
 (company-anaconda . [(20171222 342) ((company (0 8 0)) (anaconda-mode (0 1 1)) (cl-lib (0 5 0)) (dash (2 6 0)) (s (1 9))) "Anaconda backend for company-mode" single])
 (company-auctex . [(20161025 24) ((yasnippet (0 8 0)) (company (0 8 0)) (auctex (11 87))) "Companycompletion for AUCTeX" single])
 (company-c-headers . [(20170531 1330) ((emacs (24 1)) (company (0 8))) "Company mode backend for C/C++ header files" single])
 (company-emoji . [(20161230 1937) ((cl-lib (0 5)) (company (0 8 0))) "company-mode backend for emoji" tar])
 (company-nixos-options . [(20160215 57) ((company (0 8 0)) (nixos-options (0 0 1)) (cl-lib (0 5 0))) "Company Backend for nixos-options" single])
 (company-quickhelp . [(20170429 1052) ((emacs (24 3)) (company (0 8 9)) (pos-tip (0 4 6))) "Popup documentation for completion candidates" single])
 (company-restclient . [(20151202 401) ((cl-lib (0 5)) (company (0 8 0)) (emacs (24)) (know-your-http-well (0 2 0)) (restclient (0 0 0))) "companymode" single])
 (company-rtags . [(20170924 2244) ((emacs (24 3)) (company (0 8 1)) (rtags (2 10))) "RTags back-end for company" single])
 (company-shell . [(20170517 2241) ((emacs (24 4)) (company (0 8 12)) (dash (2 12 0)) (cl-lib (0 5))) "Company mode backend for shell functions" single])
 (company-statistics . [(20170210 1133) ((emacs (24 3)) (company (0 8 5))) "Sort candidates using completion history" single])
 (company-tern . [(20161004 1147) ((company (0 8 0)) (tern (0 0 1)) (dash (2 8 0)) (dash-functional (2 8 0)) (s (1 9 0)) (cl-lib (0 5 0))) "Tern backend for company-mode" single])
 (company-web . [(20171111 1049) ((company (0 8 0)) (dash (2 8 0)) (cl-lib (0 5 0)) (web-completion-data (0 1 0))) "Company version of ac-html, complete for web,html,emmet,jade,slim modes" tar])
 (concurrent . [(20161228 1930) ((emacs (24 3)) (deferred (0 5 0))) "Concurrent utility functions for emacs lisp" single])
 (csv-mode . [(1 7) nil "Major mode for editing comma/char separated values" single])
 (ctable . [(20171005 1711) nil "Table component for Emacs Lisp" single])
 (cython-mode . [(20170907 1648) nil "Major mode for editing Cython files" single])
 (dash . [(20180107 818) nil "A modern list library for Emacs" single])
 (dash-functional . [(20180107 818) ((dash (2 0 0)) (emacs (24))) "Collection of useful combinators for Emacs Lisp" single])
 (deferred . [(20170901 630) ((emacs (24 4))) "Simple asynchronous functions for emacs lisp" single])
 (devdocs . [(20170731 1050) nil "Launch DevDocs search" single])
 (diff-hl . [(20170709 2000) ((cl-lib (0 2)) (emacs (24 3))) "Highlight uncommitted changes using VC" tar])
 (diminish . [(20170419 1036) nil "Diminished modes are minor modes with no modeline display" single])
 (dired-quick-sort . [(20161208 1312) ((hydra (0 13 0))) "Persistent quick sorting of dired buffers in various ways." single])
 (disaster . [(20171016 1452) nil "Disassemble C/C++ code under cursor in Emacs" single])
 (discover-my-major . [(20170113 2306) ((makey (0 2))) "Discover key bindings and their meaning for the current Emacs major mode" single])
 (docker . [(20180107 925) ((emacs (24 4)) (dash (2 12 1)) (docker-tramp (0 1)) (magit-popup (2 6 0)) (s (1 11 0)) (tablist (0 70)) (json-mode (1 7 0))) "Emacs interface to Docker" tar])
 (docker-tramp . [(20170206 1925) ((emacs (24)) (cl-lib (0 5))) "TRAMP integration for docker containers" tar])
 (dockerfile-mode . [(20171124 1647) ((emacs (24)) (s (1 12))) "Major mode for editing Docker's Dockerfiles" single])
 (drag-stuff . [(20161107 2349) nil "Drag stuff (lines, words, region, etc...) around" tar])
 (dumb-jump . [(20180109 1318) ((emacs (24 3)) (f (0 20 0)) (s (1 11 0)) (dash (2 9 0)) (popup (0 5 3))) "jump to definition for multiple languages without configuration." single])
 (edit-server . [(20170725 859) nil "server that responds to edit requests from Chrome" single])
 (editorconfig . [(20171209 536) ((cl-lib (0 5))) "EditorConfig Emacs Plugin" tar])
 (eimp . [(20120826 1339) nil "Emacs Image Manipulation Package" single])
 (ein . [(20171128 516) ((websocket (1 7)) (auto-complete (1 4 0)) (request (0 3)) (deferred (0 5)) (request-deferred (0 2 0)) (cl-generic (0 3)) (dash (2 13 0)) (s (1 11 0)) (skewer-mode (1 6 2))) "Emacs IPython Notebook" tar])
 (elfeed . [(20180109 1604) ((emacs (24 3))) "an Emacs Atom/RSS feed reader" tar])
 (elfeed-goodies . [(20171126 2251) ((popwin (1 0 0)) (powerline (2 2)) (elfeed (2 0 0)) (cl-lib (0 5)) (noflet (0 0 10)) (ace-jump-mode (2 0))) "Elfeed goodies" tar])
 (elfeed-org . [(20171113 356) ((elfeed (1 1 1)) (org (8 2 7)) (dash (2 10 0)) (s (1 9 0)) (cl-lib (0 5))) "Configure elfeed with one or more org-mode files" single])
 (elfeed-web . [(20170709 954) ((simple-httpd (1 4 3)) (elfeed (1 4 0)) (emacs (24 1))) "web interface to Elfeed" tar])
 (elisp-refs . [(20171224 1532) ((dash (2 12 0)) (loop (1 2)) (s (1 11 0))) "find callers of elisp functions or macros" single])
 (elisp-slime-nav . [(20160128 1109) ((cl-lib (0 2))) "Make M, work in elisp like they do in slime" single])
 (elm-mode . [(20171114 1225) ((f (0 17)) (let-alist (1 0 4)) (seq (2 2)) (s (1 7 0)) (emacs (24 4)) (dash (2 13 0))) "Major mode for Elm" tar])
 (elpa-mirror . [(20171012 15) ((emacs (24 4))) "Create local package repository so package upgrade never breaks" single])
 (emmet-mode . [(20161113 2158) nil "Unofficial Emmet's support for emacs" single])
 (emoji-cheat-sheet-plus . [(20150617 631) ((emacs (24)) (helm (1 6 4))) "emojisheet for emacs" tar])
 (emojify . [(20171018 744) ((seq (1 11)) (ht (2 0)) (emacs (24 3))) "Display emojis in Emacs" tar])
 (emr . [(20170811 1057) ((s (1 3 1)) (dash (1 2 0)) (cl-lib (0 2)) (popup (0 5 0)) (emacs (24 1)) (list-utils (0 3 0)) (redshank (1 0 0)) (paredit (24 0 0)) (projectile (0 9 1)) (clang-format (0)) (iedit (0 97))) "Emacs refactoring system." tar])
 (engine-mode . [(20170812 2007) ((cl-lib (0 5))) "Define and query search engines from within Emacs." single])
 (epc . [(20140609 2234) ((concurrent (0 3 1)) (ctable (0 1 2))) "A RPC stack for the Emacs Lisp" tar])
 (epl . [(20150517 433) ((cl-lib (0 3))) "Emacs Package Library" single])
 (erc-hl-nicks . [(20160202 1150) nil "ERC nick highlighter that ignores uniquifying chars when colorizing" single])
 (erc-image . [(20170909 312) nil "Show received image urls in the ERC buffer" single])
 (erc-social-graph . [(20150508 504) nil "A social network graph module for ERC." single])
 (erc-terminal-notifier . [(20140115 224) nil "OSX notifications via the terminal-notifier gem for Emacs ERC." single])
 (erc-view-log . [(20140227 1239) nil "Major mode for viewing ERC logs" single])
 (erc-yt . [(20150426 549) ((dash (2 10 0))) "An erc module to display youtube links nicely" single])
 (es-mode . [(20171220 719) ((dash (2 11 0)) (cl-lib (0 5)) (spark (1 0)) (s (1 11 0)) (request (0 3 0))) "A major mode for editing and executing Elasticsearch queries" tar])
 (esh-help . [(20170829 2111) ((dash (1 4 0))) "Add some help functions and support for Eshell" single])
 (eshell-prompt-extras . [(20180109 2234) nil "Display extra information for your eshell prompt." single])
 (eshell-z . [(20170116 2038) ((cl-lib (0 5))) "cd to frequent directory in eshell" single])
 (esxml . [(20171129 7) nil "Library for working with xml via esxml and sxml" tar])
 (eval-sexp-fu . [(20131230 1351) ((highlight (0))) "Tiny functionality enhancements for evaluating sexps." single])
 (evil . [(20180103 2356) ((emacs (24 1)) (undo-tree (0 6 3)) (goto-chg (1 6)) (cl-lib (0 5))) "Extensible Vi layer for Emacs." tar])
 (evil-anzu . [(20170123 2318) ((evil (1 0 0)) (anzu (0 46))) "anzu for evil-mode" single])
 (evil-args . [(20140329 1429) ((evil (1 0 8))) "Motions and text objects for delimited arguments in Evil." single])
 (evil-cleverparens . [(20170717 2113) ((evil (1 0)) (paredit (1)) (smartparens (1 6 1)) (emacs (24 4)) (dash (2 12 0))) "Evil friendly minor-mode for editing lisp." tar])
 (evil-ediff . [(20170724 1223) ((evil (1 2 3))) "Make ediff a little evil" single])
 (evil-escape . [(20170913 618) ((emacs (24)) (evil (1 0 9)) (cl-lib (0 5))) "Escape from anything with a customizable key sequence" single])
 (evil-exchange . [(20170510 1959) ((evil (1 2 8)) (cl-lib (0 3))) "Exchange text more easily within Evil" single])
 (evil-iedit-state . [(20160905 1908) ((evil (1 0 9)) (iedit (0 97))) "Evil states to interface iedit mode." single])
 (evil-indent-plus . [(20151109 1106) ((evil (0)) (cl-lib (0 5))) "Evil textobjects based on indentation" single])
 (evil-lion . [(20170810 2314) ((emacs (24 3)) (evil (1 0 0))) "Evil align operator, port of vim-lion" single])
 (evil-lisp-state . [(20160403 1948) ((evil (1 0 9)) (bind-map (0)) (smartparens (1 6 1))) "An evil state to edit Lisp code" single])
 (evil-magit . [(20171213 1019) ((evil (1 2 3)) (magit (2 6 0))) "evil-based key bindings for magit" single])
 (evil-matchit . [(20171127 245) ((evil (1 0 7))) "Vim matchit ported to Evil" tar])
 (evil-mc . [(20170716 1806) ((emacs (24 3)) (evil (1 2 12)) (cl-lib (0 5))) "Multiple cursors for evil-mode" tar])
 (evil-nerd-commenter . [(20171206 441) nil "Comment/uncomment lines efficiently. Like Nerd Commenter in Vim" tar])
 (evil-numbers . [(20140606 551) nil "increment/decrement numbers like in vim" single])
 (evil-org . [(20171224 753) ((emacs (24 4)) (evil (1 0))) "evil keybindings for org-mode" tar])
 (evil-search-highlight-persist . [(20170522 2034) ((highlight (0))) "Persistent highlights after search" single])
 (evil-surround . [(20180102 601) ((evil (1 2 12))) "emulate surround.vim from Vim" single])
 (evil-tutor . [(20150102 2250) ((evil (1 0 9))) "Vimtutor adapted to Evil and wrapped in a major-mode" tar])
 (evil-unimpaired . [(20171216 144120) ((dash (2 12 0)) (f (0 18 0))) "Pairs of handy bracket mappings." tar])
 (evil-visual-mark-mode . [(20150202 1000) ((evil (1 0 9)) (dash (2 10))) "Display evil marks on buffer" single])
 (evil-visualstar . [(20160222 1648) ((evil (0))) "Starts a * or # search from the visual selection" single])
 (exec-path-from-shell . [(20170508 4) nil "Get environment variables such as $PATH from the shell" single])
 (expand-region . [(20171217 2125) nil "Increase selected region by semantic units." tar])
 (eyebrowse . [(20171216 944) ((dash (2 7 0)) (emacs (24 3 1))) "Easy window config switching" single])
 (f . [(20180106 122) ((s (1 7 0)) (dash (2 2 0))) "Modern API for working with files and directories" single])
 (fancy-battery . [(20150101 404) ((emacs (24 1))) "Fancy battery display" single])
 (fasd . [(20161216 831) nil "Emacs integration for the command-line productivity booster `fasd'" single])
 (feature-mode . [(20170907 748) nil "Major mode for editing Gherkin (i.e. Cucumber) user stories" tar])
 (fill-column-indicator . [(20171209 1124) nil "Graphically indicate the fill column" single])
 (fish-mode . [(20170430 623) ((emacs (24))) "Major mode for fish shell scripts" single])
 (flx . [(20151030 1112) ((cl-lib (0 3))) "fuzzy matching with good sorting" single])
 (flx-ido . [(20151030 1112) ((flx (0 1)) (cl-lib (0 3))) "flx integration for ido" single])
 (flycheck . [(20171214 1215) ((dash (2 12 1)) (pkg-info (0 4)) (let-alist (1 0 4)) (seq (1 11)) (emacs (24 3))) "Onfly syntax checking" tar])
 (flycheck-bashate . [(20160629 2140) ((flycheck (0 24)) (emacs (24 4))) "Integrate bashate with flycheck" single])
 (flycheck-elm . [(20160717 257) ((flycheck (0 29 -3)) (emacs (24 4))) "Flycheck support for the elm language" single])
 (flycheck-pos-tip . [(20170504 1504) ((emacs (24 1)) (flycheck (0 22)) (pos-tip (0 4 6))) "Display Flycheck errors in GUI tooltips" single])
 (flycheck-rtags . [(20170522 2154) ((emacs (24)) (flycheck (0 23)) (rtags (2 10))) "RTags Flycheck integration." single])
 (flycheck-rust . [(20170404 842) ((emacs (24 1)) (flycheck (28)) (dash (2 13 0)) (seq (2 3)) (let-alist (1 0 4))) "Flycheck: Rust additions and Cargo support" single])
 (flymd . [(20160617 514) ((cl-lib (0 5))) "On the fly markdown preview" tar])
 (flyspell-correct . [(20171205 940) nil "correcting words with flyspell via custom interface" tar])
 (flyspell-correct-helm . [(20161031 1134) ((flyspell-correct (0 4 0)) (helm (1 9 0))) "correcting words with flyspell via helm interface" single])
 (font-lock+ . [(20170222 1755) nil "Enhancements to standard library `font-lock.el'." tar])
 (fountain-mode . [(20180107 2123) ((emacs (24 5))) "Major mode for screenwriting in Fountain markup" single])
 (fringe-helper . [(20140620 1409) nil "helper functions for fringe bitmaps" single])
 (fuzzy . [(20150729 2037) nil "Fuzzy Matching" single])
 (ggtags . [(20171203 1553) ((emacs (24)) (cl-lib (0 5))) "emacs frontend to GNU Global source code tagging system" single])
 (gh . [(20171120 1302) ((emacs (24 3)) (s (1 9 0)) (dash (2 9 0)) (pcache (0 4 1)) (logito (0 1)) (marshal (0 6 3))) "A GitHub library for Emacs" tar])
 (gh-md . [(20151207 940) ((emacs (24))) "Render markdown using the Github api" single])
 (ghub+ . [(20171203 1627) ((emacs (25)) (ghub (1 2)) (apiwrap (0 4))) "a thick GitHub API client built on ghub" single])
 (ghub . [(20171223 916) ((emacs (24 4)) (let-alist (1 0 5))) "minuscule client library for the Github API" tar])
 (gist . [(20171127 2006) ((emacs (24 1)) (gh (0 10 0))) "Emacs integration for gist.github.com" single])
 (git-auto-commit-mode . [(20161229 817) nil "Emacs Minor mode to automatically commit and push" single])
 (git-commit . [(20180108 603) ((emacs (24 4)) (dash (20170810)) (with-editor (20170817))) "Edit Git commit messages" single])
 (git-gutter+ . [(20151204 923) ((git-commit (0)) (dash (0))) "Manage Git hunks straight from the buffer" single])
 (git-gutter . [(20161105 656) ((emacs (24 3))) "Port of Sublime Text plugin GitGutter" single])
 (git-gutter-fringe+ . [(20140729 403) ((git-gutter+ (0 1)) (fringe-helper (1 0 1))) "Fringe version of git-gutter+.el" single])
 (git-gutter-fringe . [(20170112 2133) ((git-gutter (0 88)) (fringe-helper (0 1 1)) (cl-lib (0 5)) (emacs (24))) "Fringe version of git-gutter.el" single])
 (git-link . [(20170603 1026) ((cl-lib (0 6 1))) "Get the GitHub/Bitbucket/GitLab URL for a buffer location" single])
 (git-messenger . [(20170101 2040) ((emacs (24 3)) (popup (0 5 0))) "Pop up last commit information of current line" single])
 (git-timemachine . [(20170325 220) ((emacs (24 3))) "Walk through git revisions of a file" single])
 (gitattributes-mode . [(20170118 1613) nil "Major mode for editing .gitattributes files" single])
 (gitconfig-mode . [(20170627 854) nil "Major mode for editing .gitconfig files" single])
 (github-clone . [(20160622 2010) ((gh (0 7 2)) (magit (2 1 0)) (emacs (24 4))) "Fork and clone github repos" single])
 (github-search . [(20170823 2023) ((magit (0 8 1)) (gh (1 0 0))) "Clone repositories by searching github" single])
 (gitignore-mode . [(20160319 302) nil "Major mode for editing .gitignore files" single])
 (gmail-message-mode . [(20160627 1147) ((ham-mode (1 0))) "A major-mode for editing gmail messages using markdown syntax." single])
 (gntp . [(20141024 1950) nil "Growl Notification Protocol for Emacs" single])
 (gnuplot . [(20141231 1337) nil "drive gnuplot from within emacs" tar])
 (golden-ratio . [(20150819 420) nil "Automatic resizing of Emacs windows to the golden ratio" single])
 (google-c-style . [(20180130 936) nil "Google's C/C++ style for c-mode" single])
 (google-translate . [(20170713 119) nil "Emacs interface to Google Translate." tar])
 (goto-chg . [(20180105 1033) nil "goto last change" single])
 (gulp-task-runner . [(20170718 1341) nil "Gulp task runner" single])
 (ham-mode . [(20150811 606) ((html-to-markdown (1 2)) (markdown-mode (2 0))) "Html As Markdown. Transparently edit an html file using markdown" single])
 (haml-mode . [(20170923 2153) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing Haml files" single])
 (helm . [(20180109 2311) ((emacs (24 4)) (async (1 9 2)) (popup (0 5 3)) (helm-core (2 8 8))) "Helm is an Emacs incremental and narrowing framework" tar])
 (helm-ag . [(20170209 745) ((emacs (24 4)) (helm (2 0))) "the silver searcher with helm interface" single])
 (helm-c-yasnippet . [(20170128 742) ((helm (1 7 7)) (yasnippet (0 8 0)) (cl-lib (0 3))) "helm source for yasnippet.el" single])
 (helm-company . [(20170608 1029) ((helm (1 5 9)) (company (0 6 13))) "Helm interface for company-mode" single])
 (helm-core . [(20180111 25) ((emacs (24 4)) (async (1 9 2))) "Development files for Helm" tar])
 (helm-css-scss . [(20140626 1725) ((helm (1 0)) (emacs (24))) "CSS/SCSS/LESS Selectors with helm interface" single])
 (helm-descbinds . [(20160916 713) ((helm (1 5))) "A convenient `describe-bindings' with `helm'" single])
 (helm-dictionary . [(20160817 1333) ((helm (1 5 5))) "Helm source for looking up dictionaries" single])
 (helm-flx . [(20180102 2116) ((emacs (24 4)) (helm (1 7 9)) (flx (0 5))) "Sort helm candidates by flx score" single])
 (helm-gitignore . [(20170210 1608) ((gitignore-mode (1 1 0)) (helm (1 7 0)) (request (0 1 0)) (cl-lib (0 5))) "Generate .gitignore files with gitignore.io." single])
 (helm-google . [(20171215 1159) ((helm (0))) "Emacs Helm Interface for quick Google searches" single])
 (helm-make . [(20171103 1155) ((helm (1 5 3)) (projectile (0 11 0))) "Select a Makefile target with helm" single])
 (helm-mode-manager . [(20151124 138) ((helm (1 5 3))) "Select and toggle major and minor modes with helm" single])
 (helm-nixos-options . [(20151013 1609) ((nixos-options (0 0 1)) (helm (1 5 6))) "Helm Interface for nixos-options" single])
 (helm-notmuch . [(20170903 2159) ((helm (1 9 3)) (notmuch (0 21))) "Search emails with Notmuch and Helm" single])
 (helm-projectile . [(20170926 1123) ((helm (1 7 7)) (projectile (0 14 0)) (cl-lib (0 3))) "Helm integration for Projectile" single])
 (helm-purpose . [(20170114 836) ((emacs (24)) (helm (1 9 2)) (window-purpose (1 4))) "Helm Interface for Purpose" single])
 (helm-pydoc . [(20160917 2242) ((helm-core (2 0)) (emacs (24 4))) "pydoc with helm interface" tar])
 (helm-rtags . [(20170812 2111) ((helm (2 0)) (rtags (2 10))) "A front-end for rtags" single])
 (helm-swoop . [(20170923 2127) ((helm (1 0)) (emacs (24 3))) "Efficiently hopping squeezed lines powered by helm interface" single])
 (helm-themes . [(20160917 2245) ((helm-core (2 0)) (emacs (24 4))) "Color theme selection with helm interface" single])
 (help-fns+ . [(20170223 733) nil "Extensions to `help-fns.el'." tar])
 (helpful . [(20180107 728) ((emacs (25 1)) (dash (2 12 0)) (dash-functional (1 2 0)) (s (1 11 0)) (f (0 20 0)) (elisp-refs (1 2)) (shut-up (0 3))) "a better *help* buffer" single])
 (hexrgb . [(20170304 1213) nil "Functions to manipulate colors, including RGB hex strings." tar])
 (hide-comnt . [(20170223 739) nil "Hide/show comments in code." tar])
 (highlight . [(20170702 732) nil "Highlighting commands." single])
 (highlight-indentation . [(20171218 137) nil "Minor modes for highlighting indentation" single])
 (highlight-numbers . [(20170905 342) ((emacs (24)) (parent-mode (2 0))) "Highlight numbers in source code" single])
 (highlight-parentheses . [(20170809 1151) nil "highlight surrounding parentheses" single])
 (hl-todo . [(20170621 1257) nil "highlight TODO and similar keywords" single])
 (ht . [(20171213 1334) ((dash (2 12 0))) "The missing hash table library for Emacs" single])
 (html-to-markdown . [(20151105 40) ((cl-lib (0 5))) "HTML to Markdown converter written in Emacs-lisp." single])
 (htmlize . [(20171017 141) nil "Convert buffer text and decorations to HTML." single])
 (hungry-delete . [(20170411 1802) nil "hungry delete minor mode" single])
 (hy-mode . [(20171202 1141) ((dash (2 13 0)) (dash-functional (1 2 0)) (s (1 11 0)) (emacs (24))) "Major mode for Hylang" tar])
 (hydra . [(20171120 1042) ((cl-lib (0 5))) "Make bindings that stick around." tar])
 (iedit . [(20170916 1024) nil "Edit multiple regions in the same way simultaneously." tar])
 (imenu-list . [(20171120 1255) ((cl-lib (0 5))) "Show imenu entries in a separate buffer" single])
 (imgur . [(20120307 225) ((anything (1 287))) "imgur client for Emacs" single])
 (impatient-mode . [(20170505 1921) ((cl-lib (0 3)) (simple-httpd (1 4 0)) (htmlize (1 40))) "Serve buffers live over HTTP" tar])
 (importmagic . [(20170702 1844) ((f (0 11 0)) (epc (0 1 0)) (emacs (24 3))) "Fix Python imports using importmagic." tar])
 (indent-guide . [(20170221 327) nil "show vertical lines to guide indentation" single])
 (inf-mongo . [(20160815 216) nil "Run a MongoDB shell process in a buffer" single])
 (info+ . [(20170923 1929) nil "Extensions to `info.el'." tar])
 (insert-shebang . [(20170825 438) nil "Insert shebang line automatically." single])
 (ivy . [(20180104 1212) ((emacs (24 1))) "Incremental Vertical completYon" tar])
 (jinja2-mode . [(20141128 207) nil "A major mode for jinja2" single])
 (jira-markup-mode . [(20150601 1409) nil "Emacs Major mode for JIRAformatted text files" single])
 (js-doc . [(20160715 634) nil "Insert JsDoc style comment easily" single])
 (js2-mode . [(20171224 1833) ((emacs (24 1)) (cl-lib (0 5))) "Improved JavaScript editing mode" tar])
 (js2-refactor . [(20171207 202) ((js2-mode (20101228)) (s (1 9 0)) (multiple-cursors (1 0 0)) (dash (1 0 0)) (s (1 0 0)) (yasnippet (0 9 0 1))) "A JavaScript refactoring library for emacs." tar])
 (json-mode . [(20170719 2205) ((json-reformat (0 0 5)) (json-snatcher (1 0 0))) "Major mode for editing JSON files." single])
 (json-reformat . [(20160212 53) nil "Reformatting tool for JSON" single])
 (json-snatcher . [(20150511 2047) ((emacs (24))) "Grabs the path to JSON values in a JSON file" single])
 (know-your-http-well . [(20160208 1504) nil "Look up the meaning of HTTP headers, methods, relations, status codes" tar])
 (launchctl . [(20150518 609) ((emacs (24 1))) "Interface to launchctl on Mac OS X." single])
 (less-css-mode . [(20160930 2153) nil "Major mode for editing LESS CSS files (lesscss.org)" single])
 (let-alist . [(1 0 5) ((emacs (24 1))) "Easily letlist by their names" single])
 (levenshtein . [(20090830 340) nil "Edit distance between two strings." single])
 (link-hint . [(20170923 855) ((avy (0 3 0)) (emacs (24 1)) (cl-lib (0 5))) "Use avy to open or copy visible urls." single])
 (linum-relative . [(20160510 118) nil "display relative line number in emacs." single])
 (lispy . [(20180110 1112) ((emacs (24 1)) (ace-window (0 9 0)) (iedit (0 9 9)) (swiper (0 7 0)) (hydra (0 13 4)) (zoutline (0 1 0))) "vi-like Paredit" tar])
 (list-utils . [(20160414 702) nil "List-manipulation utility functions" single])
 (live-py-mode . [(20180108 2138) ((emacs (24 3))) "Live Coding in Python" tar])
 (livid-mode . [(20131116 544) ((skewer-mode (1 5 3)) (s (1 8 0))) "Live browser eval of JavaScript every time a buffer changes" single])
 (load-relative . [(20170526 310) nil "relative file load (within a multi-file Emacs package)" tar])
 (loc-changes . [(20160801 1008) nil "keep track of positions even after buffer changes" single])
 (log4e . [(20170401 604) nil "provide logging framework for elisp" single])
 (logito . [(20120225 1255) ((eieio (1 3))) "logging library for Emacs" single])
 (loop . [(20160813 707) nil "friendly imperative loop structures" single])
 (lorem-ipsum . [(20140911 1408) nil "Insert dummy pseudo Latin text." single])
 (macrostep . [(20161120 1306) ((cl-lib (0 5))) "interactive macro expander" tar])
 (magit . [(20180110 531) ((emacs (24 4)) (async (20170823)) (dash (20170810)) (ghub (20171207)) (git-commit (20170823)) (let-alist (1 0 5)) (magit-popup (20171121)) (with-editor (20170817))) "A Git porcelain inside Emacs." tar])
 (magit-gh-pulls . [(20171117 226) ((emacs (24 4)) (gh (0 9 1)) (magit (2 1 0)) (pcache (0 2 3)) (s (1 6 1))) "GitHub pull requests extension for Magit" single])
 (magit-gitflow . [(20170929 124) ((magit (2 1 0)) (magit-popup (2 2 0))) "gitflow extension for magit" single])
 (magit-popup . [(20171217 1235) ((emacs (24 4)) (async (1 9 2)) (dash (2 13 0))) "Define prefixsuffix command combos" tar])
 (magithub . [(20171224 845) ((emacs (25)) (magit (2 8)) (s (1 12 0)) (ghub+ (0 2 1)) (git-commit (2 8)) (markdown-mode (2 3))) "Magit interfaces for GitHub" tar])
 (makey . [(20131231 630) ((cl-lib (0 2))) "interactive commandline mode" single])
 (markdown-mode . [(20180101 503) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for Markdown-formatted text" single])
 (markdown-toc . [(20170711 1249) ((s (1 9 0)) (dash (2 11 0)) (markdown-mode (2 1))) "A simple TOC generator for markdown file" tar])
 (marshal . [(20180102 201) ((eieio (1 4)) (json (1 3)) (ht (2 1))) "eieio extension for automatic (un)marshalling" single])
 (memoize . [(20170720 1802) nil "Memoization functions" single])
 (mmm-mode . [(20171212 1428) nil "Allow Multiple Major Modes in a buffer" tar])
 (move-text . [(20170908 2030) nil "Move current line or region with Mdown." single])
 (multi-term . [(20160619 233) nil "Managing multiple terminal buffers in Emacs." single])
 (multiple-cursors . [(20170908 1452) ((cl-lib (0 5))) "Multiple cursors for Emacs." tar])
 (mwim . [(20161004 647) nil "Switch between the beginning/end of line or code" single])
 (nameless . [(20161012 1214) ((emacs (24 4))) "Hide package namespace in your emacs-lisp code" single])
 (neotree . [(20170522 758) ((cl-lib (0 5))) "A tree plugin like NerdTree for Vim" tar])
 (nginx-mode . [(20170611 2137) nil "major mode for editing nginx config files" single])
 (nix-mode . [(20170831 1721) ((emacs (24 3))) "Major mode for editing .nix files" tar])
 (nixos-options . [(20160209 1041) ((emacs (24))) "Interface for browsing and completing NixOS options." single])
 (noflet . [(20141102 654) nil "locally override functions" single])
 (notmuch . [(20180105 135) nil "run notmuch within emacs" tar])
 (nov . [(20171104 1641) ((dash (2 12 0)) (esxml (0 3 3)) (emacs (24 4))) "Featureful EPUB reader mode" single])
 (oauth2 . [(0 11) nil "OAuth 2.0 Authorization Protocol" single])
 (ob-http . [(20170920 2251) ((s (1 9 0)) (cl-lib (0 5))) "http request in org-mode babel" tar])
 (ob-ipython . [(20171209 634) ((s (1 9 0)) (dash (2 10 0)) (dash-functional (1 2 0)) (f (0 17 2)) (emacs (24))) "org-babel functions for IPython evaluation" tar])
 (ob-mongo . [(20170720 1219) ((org (8))) "Execute mongodb queries within org-mode blocks." single])
 (ob-redis . [(20160411 2013) ((org (8))) "Execute Redis queries within org-mode blocks." single])
 (ob-restclient . [(20160323 2305) ((restclient (0))) "orgmode" single])
 (open-junk-file . [(20161210 314) nil "Open a junk (memo) file to tryerror" single])
 (org-brain . [(20180107 1655) ((emacs (25)) (org (9))) "Org-mode concept mapping" single])
 (org-bullets . [(20171127 526) nil "Show bullets in org8 characters" single])
 (org-category-capture . [(20170819 1047) ((org (9 0 0)) (emacs (24))) "Contextualy capture of org-mode TODOs." single])
 (org-download . [(20171116 1045) ((async (1 2))) "Image dragmode" single])
 (org-jira . [(20180103 1813) ((emacs (24 5)) (cl-lib (0 5)) (request (0 2 0)) (s (0 0 0))) "Syncing between Jira and Org-mode." tar])
 (org-plus-contrib . [(20180108) nil "Outline-based notes management and organizer" tar])
 (org-pomodoro . [(20171108 1314) ((alert (0 5 10)) (cl-lib (0 5))) "Pomodoro implementation for org-mode." tar])
 (org-present . [(20141109 1756) ((org (7))) "Minimalist presentation minormode." single])
 (org-projectile . [(20171022 950) ((projectile (0 11 0)) (dash (2 10 0)) (emacs (24)) (s (1 9 0)) (org-category-capture (0 0 0))) "Repository todo management for org-mode" single])
 (org-trello . [(20170225 1247) ((request-deferred (0 2 0)) (deferred (0 4 0)) (s (1 11 0)) (dash-functional (2 12 1)) (dash (2 12 1))) "Minor mode to synchronize org-mode buffer and trello board" tar])
 (orgit . [(20170731 1003) ((emacs (24 4)) (dash (2 13 0)) (magit (2 10 0)) (org (8 3 3))) "support for Org links to Magit buffers" single])
 (osx-dictionary . [(20171026 34) ((cl-lib (0 5))) "Interface for OSX Dictionary.app" tar])
 (osx-trash . [(20160520 600) ((emacs (24 1))) "System trash for OS X" tar])
 (overseer . [(20170207 2241) ((emacs (24)) (dash (2 10 0)) (pkg-info (0 4)) (f (0 18 1))) "Ert-runner Integration Into Emacs" single])
 (ox-pandoc . [(20171107 341) ((org (8 2)) (emacs (24)) (dash (2 8)) (ht (2 0)) (cl-lib (0 5))) "org exporter for pandoc." single])
 (ox-reveal . [(20161027 226) ((org (20150330))) "reveal.js Presentation Back-End for Org Export Engine" single])
 (packed . [(20170819 942) ((emacs (24 3))) "package manager agnostic Emacs Lisp package utilities" single])
 (palimpsest . [(20170119 2132) nil "Various deletion strategies when editing" single])
 (pamparam . [(20180111 1014) ((emacs (24 3)) (lispy (0 26 0)) (worf (0 1 0)) (hydra (0 13 4))) "Simple and fast flashcards." single])
 (pandoc-mode . [(20171216 1545) ((hydra (0 10 0)) (dash (2 10 0))) "Minor mode for interacting with Pandoc" tar])
 (paradox . [(20161117 502) ((emacs (24 4)) (seq (1 7)) (let-alist (1 0 3)) (spinner (1 7 3)) (hydra (0 13 2))) "A modern Packages Menu. Colored, with package ratings, and customizable." tar])
 (paredit . [(20171126 1805) nil "minor mode for editing parentheses" single])
 (parent-mode . [(20150824 1600) nil "get major mode's parent modes" single])
 (password-generator . [(20150222 1240) nil "Password generator for humans. Good, Bad, Phonetic passwords included." single])
 (pbcopy . [(20150224 2059) nil "Emacs Interface to pbcopy" single])
 (pcache . [(20170105 1414) ((eieio (1 3))) "persistent caching for Emacs." single])
 (pcre2el . [(20161120 1303) ((emacs (24)) (cl-lib (0 3))) "regexp syntax converter" single])
 (pdf-tools . [(20180109 1234) ((emacs (24 3)) (tablist (0 70)) (let-alist (1 0 4))) "Support library for PDF documents." tar])
 (persp-mode . [(20180104 843) nil "windows/buffers sets shared among frames + save/load." single])
 (pip-requirements . [(20171109 1439) ((dash (2 8 0))) "A major mode for editing pip requirements files." single])
 (pippel . [(20170730 623) ((emacs (25 1)) (s (1 11 0)) (dash (2 12 0))) "Frontend to python package manager pip" tar])
 (pkg-info . [(20150517 443) ((epl (0 8))) "Information about packages" single])
 (plantuml-mode . [(20170819 1033) nil "Major mode for PlantUML" single])
 (popup . [(20160709 729) ((cl-lib (0 5))) "Visual Popup User Interface" single])
 (popwin . [(20150315 600) nil "Popup Window Manager." single])
 (pos-tip . [(20150318 813) nil "Show tooltip at point" single])
 (powerline . [(20171023 750) ((cl-lib (0 2))) "Rewrite of Powerline" tar])
 (prodigy . [(20171121 512) ((s (1 8 0)) (dash (2 4 0)) (f (0 14 0)) (emacs (24))) "Manage external services from within Emacs" single])
 (projectile . [(20180107 2233) ((emacs (24 3)) (pkg-info (0 4))) "Manage and navigate projects in Emacs easily" single])
 (pug-mode . [(20171208 2029) ((emacs (24 4)) (cl-lib (0 5))) "Major mode for jade/pug template files" single])
 (py-isort . [(20160925 318) nil "Use isort to sort the imports in a Python buffer" single])
 (pyenv-mode . [(20170801 1648) ((pythonic (0 1 0))) "Integrate pyenv with python-mode" single])
 (pytest . [(20170614 745) ((s (1 9 0))) "Easy Python test running in Emacs" single])
 (pythonic . [(20171219 810) ((emacs (24)) (cl-lib (0 5)) (dash (2 11)) (s (1 9)) (f (0 17 2))) "Utility functions for writing pythonic emacs package." single])
 (pyvenv . [(20171215 1329) nil "Python virtual environment interface" single])
 (racer . [(20171211 1548) ((emacs (24 3)) (rust-mode (0 2 0)) (dash (2 13 0)) (s (1 10 0)) (f (0 18 2)) (pos-tip (0 4 6))) "code completion, goto-definition and docs browsing for Rust via racer" single])
 (rainbow-delimiters . [(20170929 432) nil "Highlight brackets according to their depth" single])
 (rainbow-mode . [(0 13) nil "Colorize color names in buffers" single])
 (ranger . [(20170817 857) ((emacs (24 4))) "Make dired more like ranger" single])
 (realgud . [(20180203 433) ((load-relative (1 2)) (loc-changes (1 2)) (test-simple (1 2 0)) (cl-lib (0 5)) (emacs (24))) "A modular front-end for interacting with external debuggers" tar])
 (redis . [(20150531 1248) ((emacs (24)) (cl-lib (0 5))) "Redis integration" single])
 (redshank . [(20171115 1156) ((paredit (21))) "Common Lisp Editing Extensions" tar])
 (request . [(20170131 1747) ((emacs (24 4))) "Compatible layer for URL request in Emacs" single])
 (request-deferred . [(20160419 1605) ((deferred (0 3 1)) (request (0 2 0))) "Wrap request.el by deferred" single])
 (restart-emacs . [(20170609 905) nil "Restart emacs from within emacs" single])
 (restclient . [(20171203 1248) nil "An interactive HTTP client for Emacs" single])
 (restclient-helm . [(20170314 854) ((restclient (0)) (helm (1 9 4))) "helm interface for restclient.el" single])
 (reveal-in-osx-finder . [(20150802 957) nil "Reveal file associated with buffer in OS X Finder" single])
 (rotate-text . [(20090413 2236) nil "cycle through words, symbols and patterns" tar])
 (rtags . [(20180130 942) nil "A front-end for rtags" single])
 (rust-mode . [(20180109 544) ((emacs (24 0))) "A major emacs mode for editing Rust source code" single])
 (s . [(20171102 227) nil "The long lost Emacs string manipulation library." single])
 (sass-mode . [(20161006 2326) ((haml-mode (3 0 15)) (cl-lib (0 5))) "Major mode for editing Sass files" single])
 (scratch . [(20170614 1401) nil "Mode-specific scratch buffers" single])
 (scss-mode . [(20150107 1400) nil "Major mode for editing SCSS files" single])
 (seq . [(2 20) nil "Sequence manipulation functions" tar])
 (shell-pop . [(20170304 616) ((emacs (24)) (cl-lib (0 5))) "helps you to use shell easily on Emacs. Only one key action to work." single])
 (shut-up . [(20150423 522) ((cl-lib (0 3)) (emacs (24))) "Shut up would you!" single])
 (simple-httpd . [(20171004 938) ((cl-lib (0 3))) "pure elisp HTTP server" single])
 (skeletor . [(20170616 1746) ((s (1 7 0)) (f (0 14 0)) (dash (2 2 0)) (cl-lib (0 3)) (let-alist (1 0 3)) (emacs (24 1))) "Provides project skeletons for Emacs" tar])
 (skewer-mode . [(20170730 1241) ((simple-httpd (1 4 0)) (js2-mode (20090723)) (emacs (24))) "live browser JavaScript, CSS, and HTML interaction" tar])
 (slack . [(20180103 1928) ((websocket (1 8)) (request (0 2 0)) (oauth2 (0 10)) (circe (2 2)) (alert (1 2)) (emojify (0 2))) "Slack client for Emacs" tar])
 (slim-mode . [(20170728 648) nil "Major mode for editing Slim files" single])
 (slime . [(20180111 429) ((cl-lib (0 5)) (macrostep (0 9))) "Superior Lisp Interaction Mode for Emacs" tar])
 (slime-company . [(20180108 426) ((emacs (24 4)) (slime (2 13)) (company (0 9 0))) "slime completion backend for company mode" single])
 (smartparens . [(20171201 242) ((dash (2 13 0)) (cl-lib (0 3))) "Automatic insertion, wrapping and paredit-like navigation with user defined pairs." tar])
 (smartscan . [(20170211 1233) nil "Jumps between other symbols found at point" single])
 (smeargle . [(20161212 1558) ((emacs (24 3))) "Highlighting region by last updated time" single])
 (spaceline . [(20171111 334) ((emacs (24 4)) (cl-lib (0 5)) (powerline (2 3)) (dash (2 11 0)) (s (1 10 0))) "Modeline configuration library for powerline" tar])
 (spaceline-all-the-icons . [(20170829 120) ((emacs (24 4)) (all-the-icons (2 6 0)) (spaceline (2 0 0)) (memoize (1 0 1))) "A Spaceline theme using All The Icons" tar])
 (spark . [(20160414 1901) ((emacs (24 3))) "sparkline generation" single])
 (spinner . [(1 7 3) nil "Add spinners and progressline for ongoing operations" single])
 (spray . [(20160304 1420) nil "a speed reading mode" single])
 (sql-indent . [(20170112 1507) nil "indentation of SQL statements" single])
 (srefactor . [(20170223 540) ((emacs (24 4))) "A refactoring tool based on Semantic parser framework" tar])
 (stickyfunc-enhance . [(20150429 1114) ((emacs (24 3))) "An enhancement to stock `semanticmode'" single])
 (string-inflection . [(20180102 643) nil "underscore > lowerCamelCase conversion of names" single])
 (svg . [(0 1) ((emacs (25))) "svg image creation functions" single])
 (swiper . [(20180102 1035) ((emacs (24 1)) (ivy (0 9 0))) "Isearch with an overview. Oh, man!" single])
 (symon . [(20170224 33) nil "tiny graphical system monitor" single])
 (tablist . [(20170219 1935) ((emacs (24 3))) "Extended tabulatedmode" tar])
 (tagedit . [(20161121 55) ((s (1 3 1)) (dash (1 0 3))) "Some pareditmode" single])
 (tern . [(20170925 1333) ((json (1 2)) (cl-lib (0 5)) (emacs (24))) "Tern-powered JavaScript integration" single])
 (test-simple . [(20170527 832) ((cl-lib (0))) "Simple Unit Test Framework for Emacs Lisp" single])
 (tide . [(20171214 543) ((dash (2 10 0)) (s (1 11 0)) (flycheck (27)) (typescript-mode (0 1)) (cl-lib (0 5))) "Typescript Interactive Development Environment" tar])
 (tiny . [(20170903 249) nil "Quickly generate linear ranges in Emacs" single])
 (tldr . [(20171023 1929) ((emacs (24 3))) "tldr client for Emacs" single])
 (toc-org . [(20171009 156) nil "add table of contents to orgtoc)" single])
 (toml-mode . [(20161107 1000) ((emacs (24)) (cl-lib (0 5))) "Major mode for editing TOML files" single])
 (typescript-mode . [(20171229 810) nil "Major mode for editing typescript" single])
 (undo-tree . [(20170706 246) nil "Treat undo history as a tree" single])
 (unfill . [(20170722 1846) nil "Unfill paragraphs or regions, and toggle between filled & unfilled" single])
 (use-package . [(20180108 1754) ((emacs (24 3)) (bind-key (2 4))) "A configuration macro for simplifying your .emacs" tar])
 (uuidgen . [(20140918 1601) nil "Provides various UUID generating functions" single])
 (vi-tilde-fringe . [(20141027 1942) ((emacs (24))) "Displays tildes in the fringe on empty lines a la Vi." single])
 (vlf . [(20170830 1148) nil "View Large Files" tar])
 (vmd-mode . [(20161106 125) ((emacs (24 3))) "Fast Github-flavored Markdown preview using a vmd subprocess." single])
 (volatile-highlights . [(20160611 1855) nil "Minor mode for visual feedback on some operations." single])
 (web-beautify . [(20161115 1447) nil "Format HTML, CSS and JavaScript/JSON" single])
 (web-completion-data . [(20160318 148) nil "Shared completion data for acweb" tar])
 (web-mode . [(20171118 1132) ((emacs (23 1))) "major mode for editing web templates" single])
 (websocket . [(20171113 2045) ((cl-lib (0 5))) "Emacs WebSocket client and server" single])
 (which-key . [(20180108 1930) ((emacs (24 4))) "Display available keybindings in popup" single])
 (window-purpose . [(20171107 659) ((emacs (24)) (cl-lib (0 5)) (let-alist (1 0 3)) (imenu-list (0 1))) "Purpose-based window management for Emacs" tar])
 (winum . [(20171028 702) ((cl-lib (0 5)) (dash (2 13 0))) "Navigate windows and frames using numbers." single])
 (with-editor . [(20180111 433) ((emacs (24 4)) (async (1 9))) "Use the Emacsclient as $EDITOR" tar])
 (worf . [(20171002 1118) ((swiper (0 7 0)) (ace-link (0 1 0)) (hydra (0 13 0)) (zoutline (0 1 0))) "A warrior does not press so many keys! (in org-mode)" tar])
 (ws-butler . [(20170111 1534) nil "Unobtrusively remove trailing whitespace." single])
 (xterm-color . [(20170102 1525) ((cl-lib (0 5))) "ANSI & XTERM 256 color support" single])
 (yaml-mode . [(20170727 1531) ((emacs (24 1))) "Major mode for editing YAML files" single])
 (yapfify . [(20180105 1447) nil "(automatically) format python buffers using YAPF." single])
 (yasnippet . [(20180102 1824) ((cl-lib (0 5))) "Yet another snippet extension for Emacs." single])
 (yasnippet-snippets . [(20180112 516) ((yasnippet (0 8 0))) "Collection of yasnippet snippets" tar])
 (zenburn-theme . [(20180111 43) nil "A low contrast color theme for Emacs." single])
 (zoutline . [(20170722 651) nil "Simple outline library." single])
 (ztree . [(20170223 1014) ((cl-lib (0))) "Text mode directory tree" tar])
)